// Code generated by counterfeiter. DO NOT EDIT.
package outfakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v5"
)

type ReleaseImageReferencesAdder struct {
	AddReleaseImageReferencesStub        func(release pivnet.Release) error
	addReleaseImageReferencesMutex       sync.RWMutex
	addReleaseImageReferencesArgsForCall []struct {
		release pivnet.Release
	}
	addReleaseImageReferencesReturns struct {
		result1 error
	}
	addReleaseImageReferencesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseImageReferencesAdder) AddReleaseImageReferences(release pivnet.Release) error {
	fake.addReleaseImageReferencesMutex.Lock()
	ret, specificReturn := fake.addReleaseImageReferencesReturnsOnCall[len(fake.addReleaseImageReferencesArgsForCall)]
	fake.addReleaseImageReferencesArgsForCall = append(fake.addReleaseImageReferencesArgsForCall, struct {
		release pivnet.Release
	}{release})
	fake.recordInvocation("AddReleaseImageReferences", []interface{}{release})
	fake.addReleaseImageReferencesMutex.Unlock()
	if fake.AddReleaseImageReferencesStub != nil {
		return fake.AddReleaseImageReferencesStub(release)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addReleaseImageReferencesReturns.result1
}

func (fake *ReleaseImageReferencesAdder) AddReleaseImageReferencesCallCount() int {
	fake.addReleaseImageReferencesMutex.RLock()
	defer fake.addReleaseImageReferencesMutex.RUnlock()
	return len(fake.addReleaseImageReferencesArgsForCall)
}

func (fake *ReleaseImageReferencesAdder) AddReleaseImageReferencesArgsForCall(i int) pivnet.Release {
	fake.addReleaseImageReferencesMutex.RLock()
	defer fake.addReleaseImageReferencesMutex.RUnlock()
	return fake.addReleaseImageReferencesArgsForCall[i].release
}

func (fake *ReleaseImageReferencesAdder) AddReleaseImageReferencesReturns(result1 error) {
	fake.AddReleaseImageReferencesStub = nil
	fake.addReleaseImageReferencesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseImageReferencesAdder) AddReleaseImageReferencesReturnsOnCall(i int, result1 error) {
	fake.AddReleaseImageReferencesStub = nil
	if fake.addReleaseImageReferencesReturnsOnCall == nil {
		fake.addReleaseImageReferencesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseImageReferencesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseImageReferencesAdder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseImageReferencesMutex.RLock()
	defer fake.addReleaseImageReferencesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseImageReferencesAdder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
