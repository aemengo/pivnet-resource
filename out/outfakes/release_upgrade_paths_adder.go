// Code generated by counterfeiter. DO NOT EDIT.
package outfakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v5"
)

type ReleaseUpgradePathsAdder struct {
	AddReleaseUpgradePathsStub        func(release pivnet.Release) error
	addReleaseUpgradePathsMutex       sync.RWMutex
	addReleaseUpgradePathsArgsForCall []struct {
		release pivnet.Release
	}
	addReleaseUpgradePathsReturns struct {
		result1 error
	}
	addReleaseUpgradePathsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseUpgradePathsAdder) AddReleaseUpgradePaths(release pivnet.Release) error {
	fake.addReleaseUpgradePathsMutex.Lock()
	ret, specificReturn := fake.addReleaseUpgradePathsReturnsOnCall[len(fake.addReleaseUpgradePathsArgsForCall)]
	fake.addReleaseUpgradePathsArgsForCall = append(fake.addReleaseUpgradePathsArgsForCall, struct {
		release pivnet.Release
	}{release})
	fake.recordInvocation("AddReleaseUpgradePaths", []interface{}{release})
	fake.addReleaseUpgradePathsMutex.Unlock()
	if fake.AddReleaseUpgradePathsStub != nil {
		return fake.AddReleaseUpgradePathsStub(release)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addReleaseUpgradePathsReturns.result1
}

func (fake *ReleaseUpgradePathsAdder) AddReleaseUpgradePathsCallCount() int {
	fake.addReleaseUpgradePathsMutex.RLock()
	defer fake.addReleaseUpgradePathsMutex.RUnlock()
	return len(fake.addReleaseUpgradePathsArgsForCall)
}

func (fake *ReleaseUpgradePathsAdder) AddReleaseUpgradePathsArgsForCall(i int) pivnet.Release {
	fake.addReleaseUpgradePathsMutex.RLock()
	defer fake.addReleaseUpgradePathsMutex.RUnlock()
	return fake.addReleaseUpgradePathsArgsForCall[i].release
}

func (fake *ReleaseUpgradePathsAdder) AddReleaseUpgradePathsReturns(result1 error) {
	fake.AddReleaseUpgradePathsStub = nil
	fake.addReleaseUpgradePathsReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseUpgradePathsAdder) AddReleaseUpgradePathsReturnsOnCall(i int, result1 error) {
	fake.AddReleaseUpgradePathsStub = nil
	if fake.addReleaseUpgradePathsReturnsOnCall == nil {
		fake.addReleaseUpgradePathsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseUpgradePathsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseUpgradePathsAdder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseUpgradePathsMutex.RLock()
	defer fake.addReleaseUpgradePathsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseUpgradePathsAdder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
